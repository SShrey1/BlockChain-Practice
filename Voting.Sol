// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface IVoteToken{
    function balanceOf(address account) external view returns (uint256);
}

contract Voting {
    address public owner;
    IVoteToken public voteToken;

    struct Candidate {
        string name;
        uint256 VoteCount;
    }

    Candidate[] public candidates;
    mapping(address => bool) public hasVoted;

    constructor(address _tokenAddress, string[] memory _candidateNames){
        owner = msg.sender;
        voteToken = IVoteToken(_tokenAddress);

        for(uint256 i = 0; i < _candidateNames.length; i++){
            candidates.push(Candidate({name : _candidateNames[i], VoteCount : 0}));
        }
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    function vote(uint256 candidateIndex) public {
        require(voteToken.balanceOf(msg.sender) > 0, "No Voting tokens");
        require(!hasVoted[msg.sender], "Already voted");
        require(candidateIndex < candidates.length, "Invalid candidate");

        hasVoted[msg.sender] = true;
        candidates[candidateIndex].VoteCount += 1;
    }

    function getCandidates() public view returns (Candidate[] memory){
        return candidates;
    }
}